<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">






	<!-- 在实际开发过程中都需要配置mvc:annotation-driven标签 注解扫描起作用 RequestMappingHandlerMapping 
		、RequestMappingHandlerAdapter 与 ExceptionHandlerExceptionResolver 三个bean。 
		 还将提供以下支持：  支持使用 ConversionService 实例对表单参数进行类型转换  支持使用 @NumberFormat、@DateTimeFormat 
		注解完成数据类型的格式化  支持使用 @Valid 注解对 JavaBean 实例进行 JSR 303 验证  支持使用 @RequestBody 
		和 @ResponseBody 注解 <mvc:annotation-driven /> -->
	<!-- 开启注解模式 项目支撑注解 -->
	<bean id="utf8Charset" class="java.nio.charset.Charset" factory-method="forName">
		    <constructor-arg value="UTF-8" />
		</bean>
		<!-- 开启注解模式 项目支撑注解 -->
		
	<!-- 数据校验 。。。。 -->
		<mvc:annotation-driven >
		    <mvc:message-converters>
		        <bean class="org.springframework.http.converter.StringHttpMessageConverter">
		            <constructor-arg ref="utf8Charset" />
		        </bean>
		    </mvc:message-converters>
		</mvc:annotation-driven>
	

<!--在SpringMvc中只扫描@Controller注解。 -->
	<context:component-scan base-package="com.echo.web.controller">
		<!--仅仅扫描注解controller层  -->
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	
	
	<!-- 配置映射解析器：如何将控制器返回的结果字符串，转换为一个物理的视图文件 -->
	<bean id="internalResourceViewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 映射解析器 springMVC提供给我 资源路径 ： prefix +"自己定义路径"+ suffix -->
		<property name="prefix" value="/WEB-INF/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- json转化器 可以将结果转化 -->
	<bean id="mappingJacksonValue"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value><!-- 避免IE出现下载JSON文件的情况 -->
			</list>
		</property>
	</bean>

	<bean id="stringHttpMessageConverter"
		class="org.springframework.http.converter.StringHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<!-- Spring MVC JSON 是它拦截 读取到 @responseBody是触发他 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonValue" /><!-- 方法中需要两个参数 关联1 -->
				<ref bean="stringHttpMessageConverter" /><!-- 方法中需要两个参数 关联2 -->
			</list>
		</property>
	</bean>
	<!-- json转化器 可以将结果转化 end -->


	<!--配置支持文件上传的解析器 -->
	<bean
		class="org.springframework.web.multipart.support.StandardServletMultipartResolver"
		id="multipartResolver">
	</bean>

	<!-- 配置国际化信息文件Bean 自动绑定国际化的配置文件 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="mulilang"></property>
	</bean>

	<!-- 可以通过参数动态改变区域语言 /modelAttriTest/modelLocale?lang=en_US 支持通过参数形式自动更改语言显示 -->
	<bean id="localeResolver"
		class="org.springframework.web.servlet.i18n.SessionLocaleResolver" />


	<!-- 存储区域设置信息 设置更改区域语言 通过lang参数修改 -->
	<mvc:interceptors>
		<bean id="localeChangeInterceptor"
			class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
			<!-- 改变国际化参数名称 -->
			<property name="paramName" value="lang" />
		</bean>
	</mvc:interceptors>

	<!-- 以下 validator ConversionService 在使用 mvc:annotation-driven 会 自动注册 启用支持 
		验证国际化功能 -->
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<!-- 如果不加默认到 使用classpath下的 ValidationMessages.properties -->
		<property name="validationMessageSource" ref="messageSource" />

	</bean>

	<!-- 类型转换 spring mvc提供的 javabean -->
	<bean id="conversionService"
		class="org.springframework.format.support.FormattingConversionServiceFactoryBean" />

	<bean id="webBindingInitializer"
		class="org.springframework.web.bind.support.ConfigurableWebBindingInitializer">

		<property name="conversionService" ref="conversionService" />
		<!-- name bean初始化的参数名称 ref 引用另外一个bean -->
		<property name="validator" ref="validator" />
	</bean>
	
	 <!--swagger  -->
	    <mvc:annotation-driven/>
	    <bean class="com.echo.web.util.common.SwaggerConfig" />
    <!-- end -->
	

	
	
	
	<!-- 可以实现空跳转 path请求路径 【view-name 视图】 -->
	<!-- 默认界面 -->
	<mvc:view-controller path="/indexindex" view-name="html/public" />
	<mvc:view-controller path="/shouzu" view-name="html/shouzu" />
	<mvc:view-controller path="/zizu" view-name="html/zizu" />
	<mvc:view-controller path="/showPaper" view-name="html/shou_text"/>
	<mvc:view-controller path="/shitiguanli" view-name="html/shijuanguanli"/>
	<mvc:view-controller path="/pigai" view-name="html/pigai"/>
	<mvc:view-controller path="/shijuanInfo" view-name="html/shijuanguanli_D"/>
	<mvc:view-controller path="/showshijuanInfo" view-name="html/shijuanguanli_S"/>
	<mvc:view-controller path="/showshijuanupdatainfo" view-name="pages/updatainfo"/>


       <!-- springmvc 拦截器 -->
			<mvc:interceptors>
 <mvc:interceptor><mvc:mapping path="/bkUser/*"/> <bean class="com.echo.web.handler.SpringMVCInterceptor"/> </mvc:interceptor>
</mvc:interceptors>



	<!-- 告诉 springmvc 如果符合springmvc 配置请求地址进行拦截 否则 放行 走原有流程 -->
	<!-- org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler， 
		它会像一个检查员，对进入DispatcherServlet的URL进行筛查，如果发现是静态资源的请求， 就将该请求转由Web应用服务器默认的Servlet处理，如果不是静态资源的请求，才由DispatcherServlet继续处理 -->
	<mvc:default-servlet-handler />
</beans>