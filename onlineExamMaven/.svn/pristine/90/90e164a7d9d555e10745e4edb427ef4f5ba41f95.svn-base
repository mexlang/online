<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xsi:schemaLocation="http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo-1.10.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.3.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<!-- 支持注解   <context:annotation-config/>   -->
	  <context:annotation-config/>
	  
	  
	  <!-- 定时器 -->
	  <task:annotation-driven/>
	  
	  
	   <!-- spring  本身扫描注解类型 -->
	 <context:component-scan base-package="com.echo.web">
		<!--仅仅扫描注解controller层    使用Annotation自动注册Bean，：在主容器中不扫描@Controller注解， -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	 

	 
	 <!-- 自动读取property -->
	<context:property-placeholder location="classpath:config/config.properties" />

	<!-- 配置 hikaricp数据源 -->
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource"  
		destroy-method="shutdown">
		<constructor-arg>
			<bean class="com.zaxxer.hikari.HikariConfig">
				<property name="driverClassName" value="${hikaricp.jdbc.driverClassName}" />
				<property name="jdbcUrl" value="${hikaricp.url}" />
				<property name="username" value="${hikaricp.username}" />
				<property name="password" value="${hikaricp.password}" />
				<property name="connectionTestQuery" value="${hikaricp.connectionTestQuery}" />
				<property name="connectionTimeout" value="${hikaricp.connectionTimeout}" />
				<property name="idleTimeout" value="${hikaricp.idleTimeout}" />
				<property name="maxLifetime" value="${hikaricp.maxLifetime}" />
				<property name="maximumPoolSize" value="${hikaricp.maximumPoolSize}" />
				<property name="minimumIdle" value="${hikaricp.minimumIdle}" />
			</bean>
		</constructor-arg>
	</bean>



	<!--采用spring管理sessionFactor -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 引用数据源 关联-->
		<property name="dataSource" ref="dataSource"></property>
		<!-- 使用spring引用mybatis配置文件 -->
		<property name="configLocation" value="classpath:config/mybatis-config.xml"></property>
		<!-- 把实体对象的别名生产 -->
		<!-- <property name="typeAliasesPackage" value="com.echo.study.model"/> -->
		<!-- 是否使用spring 帮助引用mappper <property name="mapperLocations" value="classpath:com/**/*.xml" 
			></property> -->
	</bean>
	<!-- 采用自动扫描创建mapper bean  扫描配置信息  注入到 ioc 容器中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 省去mybatis自己管理mapper bean -->
		<property name="basePackage" value="com.echo.web.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryBean" />
	</bean>
	
	
	<!-- 添加事务管理  避免我们手动commit -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	
	
	
	<!-- 采用注解管理事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
	 
	 
	 
	 <!--  spring data -redis   -->
	 <bean id="jedisPoolConfig"  class="redis.clients.jedis.JedisPoolConfig">
	 <property name="maxIdle" value="${redis.maxIdle}" />
     <property name="maxTotal" value="${redis.maxTotal}" />
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}" />
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
	 </bean>
	 <bean id="jedisConnectionFactory" 
    class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" destroy-method="destroy">
    <property name="hostName" value="${redis.host}" />
    <property name="port" value="${redis.port}" />
     <property name="database" value="1" />
      <property name="password" value="" />
      <property name="usePool" value="true"/>
      <property name="poolConfig" ref="jedisPoolConfig"/>
    </bean>
<!-- redis template definition -->
<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory" />
		<!-- 通过序列化 可以直接存储对象    如果不配置Serializer，那么存储的时候智能使用String，如果用Bean类型存储，那么会提示错误 javaBean can't cast to String！！！ -->
		<property name="keySerializer" >
		<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
		</property>
		<property name="valueSerializer">  
		 <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />  
		</property>
  </bean>
      <!-- 对string操作的封装 -->  
    <bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate"  
        p:connection-factory-ref="jedisConnectionFactory" />  
 <!--  spring data -redis  end   -->
 
 
 
 	 
	 <!-- 启用aop 功能 使用 当Spring IOC容器侦测到bean配置文件中的<aop:aspectj-autoproxy>元素时，会自动为与AspectJ切面匹配的bean创建代理
	 ⑤AspectJ支持5种类型的通知注解：
		[1]@Before：前置通知，在方法执行之前执行
		[2]@After：后置通知，在方法执行之后执行
		[3]@AfterRunning：返回通知，在方法返回结果之后执行
		[4]@AfterThrowing：异常通知，在方法抛出异常之后执行
		[5]@Around：环绕通知，围绕着方法执行
	  -->
	 <aop:aspectj-autoproxy  proxy-target-class="true" />
  
 
</beans>